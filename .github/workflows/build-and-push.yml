name: "build and push"

on:
  push:
    branches:
      - main
    paths:
      - client/Cargo.toml
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write

jobs:
  check-tag:
    runs-on: ubuntu-latest
    outputs:
      is-new: ${{ steps.check-new.outputs.is_new_version }}
      new-tag: ${{ steps.check-new.outputs.version }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: check current tag
        id: check-new
        uses: digicatapult/check-version@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          package_manager: 'cargo'
          cargo_package_location: './client/'
          fail_on_same_version: 'false'

  create-release:
    needs: check-tag
    if: ${{ needs.check-tag.outputs.is-new == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v4

      - name: tag head
        shell: bash
        run: |
          git tag ${{ needs.check-tag.outputs.new-tag }}
          git push origin --tags

      - name: create release
        uses: taiki-e/create-gh-release-action@v1
        with:
          branch: main
          ref: refs/tags/${{ needs.check-tag.outputs.new-tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
          changelog: CHANGELOG.md
          title: 'Scrubarr $tag'

  release-binaries:
    needs:
      - check-tag
      - create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-gnu

    steps:
      - name: checkout repo
        uses: actions/checkout@v4

      - name: build and upload binaries
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: scrubarr
          target: ${{ matrix.target }}
          archive: $bin-${{ matrix.build }}
          ref: refs/tags/${{ needs.check-tag.outputs.new-tag }}
          token: ${{ secrets.GITHUB_TOKEN }}

  release-docker:
    runs-on: ubuntu-latest
    needs:
      - check-tag
      - release-binaries
    steps:
      - name: docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.check-tag.outputs.new-tag }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.check-tag.outputs.new-tag }}
            type=semver,pattern={{major}},value=${{ needs.check-tag.outputs.new-tag }},enable=${{ !startsWith(needs.check-tag.outputs.new-tag, 'v0.') }}

      - name: set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: login to GHCR
        uses: docker/login-action@v3
        with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}

      - name: build and push
        uses: docker/build-push-action@v6
        with:
          provenance: false
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}